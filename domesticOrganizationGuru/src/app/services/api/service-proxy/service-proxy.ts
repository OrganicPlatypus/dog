/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class Client {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    landingConfiguration(): Observable<number> {
        let url_ = this.baseUrl + "/api/Configuration/LandingConfiguration";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLandingConfiguration(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLandingConfiguration(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processLandingConfiguration(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;

            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    createNotesPack(body: CreateNotesPackDto | undefined): Observable<NoteSettingsDto> {
        let url_ = this.baseUrl + "/api/Organizer/CreateNotesPack";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateNotesPack(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateNotesPack(<any>response_);
                } catch (e) {
                    return <Observable<NoteSettingsDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<NoteSettingsDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateNotesPack(response: HttpResponseBase): Observable<NoteSettingsDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = NoteSettingsDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 422) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = NoteSettingsDto.fromJS(resultData422);
            return throwException("Client Error", status, _responseText, _headers, result422);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = NoteSettingsDto.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<NoteSettingsDto>(<any>null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    updateNotesPack(body: UpdateNoteRequestDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Organizer/UpdateNotesPack";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateNotesPack(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateNotesPack(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateNotesPack(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    updateNoteExpiriationTime(body: UpdateNoteExpiriationTimeDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Organizer/UpdateNoteExpiriationTime";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateNoteExpiriationTime(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateNoteExpiriationTime(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateNoteExpiriationTime(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @return Success
     */
    joinSession(keyInput: string | null): Observable<NotesSessionDto> {
        let url_ = this.baseUrl + "/api/joinSession/{keyInput}";
        if (keyInput === undefined || keyInput === null)
            throw new Error("The parameter 'keyInput' must be defined.");
        url_ = url_.replace("{keyInput}", encodeURIComponent("" + keyInput));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processJoinSession(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processJoinSession(<any>response_);
                } catch (e) {
                    return <Observable<NotesSessionDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<NotesSessionDto>><any>_observableThrow(response_);
        }));
    }

    protected processJoinSession(response: HttpResponseBase): Observable<NotesSessionDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = NotesSessionDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = resultData404 !== undefined ? resultData404 : <any>null;

            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<NotesSessionDto>(<any>null);
    }
}

export class CreateNotesPackDto implements ICreateNotesPackDto {
    noteName?: string | undefined;
    password?: string | undefined;
    expirationMinutesRange?: number;

    constructor(data?: ICreateNotesPackDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.noteName = _data["noteName"];
            this.password = _data["password"];
            this.expirationMinutesRange = _data["expirationMinutesRange"];
        }
    }

    static fromJS(data: any): CreateNotesPackDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateNotesPackDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["noteName"] = this.noteName;
        data["password"] = this.password;
        data["expirationMinutesRange"] = this.expirationMinutesRange;
        return data;
    }
}

export interface ICreateNotesPackDto {
    noteName?: string | undefined;
    password?: string | undefined;
    expirationMinutesRange?: number;
}

export class NoteSettingsDto implements INoteSettingsDto {
    expirationDate?: Date;

    constructor(data?: INoteSettingsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.expirationDate = _data["expirationDate"] ? new Date(_data["expirationDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): NoteSettingsDto {
        data = typeof data === 'object' ? data : {};
        let result = new NoteSettingsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["expirationDate"] = this.expirationDate ? this.expirationDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface INoteSettingsDto {
    expirationDate?: Date;
}

export class NoteDto implements INoteDto {
    noteText?: string | undefined;
    isComplete?: boolean;

    constructor(data?: INoteDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.noteText = _data["noteText"];
            this.isComplete = _data["isComplete"];
        }
    }

    static fromJS(data: any): NoteDto {
        data = typeof data === 'object' ? data : {};
        let result = new NoteDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["noteText"] = this.noteText;
        data["isComplete"] = this.isComplete;
        return data;
    }
}

export interface INoteDto {
    noteText?: string | undefined;
    isComplete?: boolean;
}

export class UpdateNoteRequestDto implements IUpdateNoteRequestDto {
    connectionId?: string | undefined;
    noteName?: string | undefined;
    notesPack?: NoteDto[] | undefined;
    expirationMinutesRange?: number;

    constructor(data?: IUpdateNoteRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.connectionId = _data["connectionId"];
            this.noteName = _data["noteName"];
            if (Array.isArray(_data["notesPack"])) {
                this.notesPack = [] as any;
                for (let item of _data["notesPack"])
                    this.notesPack!.push(NoteDto.fromJS(item));
            }
            this.expirationMinutesRange = _data["expirationMinutesRange"];
        }
    }

    static fromJS(data: any): UpdateNoteRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateNoteRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["connectionId"] = this.connectionId;
        data["noteName"] = this.noteName;
        if (Array.isArray(this.notesPack)) {
            data["notesPack"] = [];
            for (let item of this.notesPack)
                data["notesPack"].push(item.toJSON());
        }
        data["expirationMinutesRange"] = this.expirationMinutesRange;
        return data;
    }
}

export interface IUpdateNoteRequestDto {
    connectionId?: string | undefined;
    noteName?: string | undefined;
    notesPack?: NoteDto[] | undefined;
    expirationMinutesRange?: number;
}

export class UpdateNoteExpiriationTimeDto implements IUpdateNoteExpiriationTimeDto {
    noteName?: string | undefined;
    expirationMinutesRange?: number;

    constructor(data?: IUpdateNoteExpiriationTimeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.noteName = _data["noteName"];
            this.expirationMinutesRange = _data["expirationMinutesRange"];
        }
    }

    static fromJS(data: any): UpdateNoteExpiriationTimeDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateNoteExpiriationTimeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["noteName"] = this.noteName;
        data["expirationMinutesRange"] = this.expirationMinutesRange;
        return data;
    }
}

export interface IUpdateNoteExpiriationTimeDto {
    noteName?: string | undefined;
    expirationMinutesRange?: number;
}

export class NotesSessionDto implements INotesSessionDto {
    notes?: NoteDto[] | undefined;
    expirationMinutesRange?: number;
    expirationDate?: Date;

    constructor(data?: INotesSessionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["notes"])) {
                this.notes = [] as any;
                for (let item of _data["notes"])
                    this.notes!.push(NoteDto.fromJS(item));
            }
            this.expirationMinutesRange = _data["expirationMinutesRange"];
            this.expirationDate = _data["expirationDate"] ? new Date(_data["expirationDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): NotesSessionDto {
        data = typeof data === 'object' ? data : {};
        let result = new NotesSessionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.notes)) {
            data["notes"] = [];
            for (let item of this.notes)
                data["notes"].push(item.toJSON());
        }
        data["expirationMinutesRange"] = this.expirationMinutesRange;
        data["expirationDate"] = this.expirationDate ? this.expirationDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface INotesSessionDto {
    notes?: NoteDto[] | undefined;
    expirationMinutesRange?: number;
    expirationDate?: Date;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}
